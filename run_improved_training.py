import subprocess
import sys
import time
import os
import torch

def main():
    """Ejecutar entrenamiento mejorado"""
    start_time = time.time()
    
    print("üöÄ ENTRENAMIENTO CIFF-NET MEJORADO")
    print("=" * 70)
    print("üéØ Mejoras implementadas:")
    print("   ‚úÖ EfficientNet-B1 (m√°s potente)")
    print("   ‚úÖ Focal Loss para melanoma")
    print("   ‚úÖ Oversample clases minoritarias")
    print("   ‚úÖ Augmentaci√≥n m√©dica espec√≠fica")
    print("   ‚úÖ Multi-head attention mejorado")
    print("   ‚úÖ SE blocks en todas las capas")
    print("   ‚úÖ Scheduler adaptativo")
    print("   ‚úÖ Tracking espec√≠fico melanoma")
    print("   ‚úÖ M√∫ltiples criterios de guardado")
    print("=" * 70)
    
    # Limpiar GPU
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
        print(f"üî• GPU: {torch.cuda.get_device_name(0)}")
        print(f"üíæ VRAM: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
    
    # Configurar entorno
    env = os.environ.copy()
    env['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'
    env['PYTHONIOENCODING'] = 'utf-8'
    
    try:
        # Ejecutar entrenamiento mejorado
        result = subprocess.run(
            [sys.executable, 'train_improved.py'], 
            env=env,
            encoding='utf-8',
            errors='ignore'
        )
        
        if result.returncode == 0:
            print("üéâ Entrenamiento mejorado completado exitosamente!")
            
            # Verificar archivos generados
            expected_files = [
                'best_overall_improved.pth',
                'best_melanoma_improved.pth', 
                'best_balanced_improved.pth',
                'training_history_improved.png',
                'confusion_matrix_improved.png',
                'classification_report_improved.csv'
            ]
            
            print("\nüìÅ Archivos generados:")
            for file in expected_files:
                if os.path.exists(file):
                    size_mb = os.path.getsize(file) / (1024*1024)
                    print(f"   ‚úÖ {file} ({size_mb:.1f} MB)")
                else:
                    print(f"   ‚ùå {file}")
            
            total_time = time.time() - start_time
            print(f"\n‚è±Ô∏è  Tiempo total: {total_time/3600:.2f} horas")
            print("\nüéØ Pr√≥ximos pasos:")
            print("   1. Revisar training_history_improved.png")
            print("   2. Comparar confusion_matrix_improved.png con anterior")
            print("   3. Analizar mejora en detecci√≥n de melanoma")
            print("   4. Usar best_melanoma_improved.pth para aplicaciones cr√≠ticas")
            
        else:
            print("‚ùå Error en entrenamiento mejorado")
            
    except Exception as e:
        print(f"‚ùå Error ejecutando entrenamiento: {e}")

if __name__ == "__main__":
    main()